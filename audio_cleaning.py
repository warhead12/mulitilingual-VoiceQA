# -*- coding: utf-8 -*-
"""audio cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WDYMn96qeqA7JR2Jsirw3nWnVynIPSHt
"""

# !pip install transformers datasets scipy

from scipy.io import wavfile
import numpy as np
import torch
import soundfile as sf
from transformers import WhisperProcessor, WhisperForConditionalGeneration
device = torch.device('cuda') if torch.cuda.is_available() else "cpu"
def transcribe_audio(file_path, language):
    # Load the FLAC file
    audio_array, sampling_rate = sf.read(file_path)

    # Convert audio data to a NumPy array
    audio_array = np.array(audio_array)

    # Create the Whisper processor and model
    processor = WhisperProcessor.from_pretrained("openai/whisper-large-v2")
    model = WhisperForConditionalGeneration.from_pretrained("openai/whisper-large-v2")
    # model.to(device)
    forced_decoder_ids = processor.get_decoder_prompt_ids(language=language, task="translate")

    # Process the audio and generate transcriptions
    input_features = processor(audio_array, sampling_rate=sampling_rate, return_tensors="pt").input_features
    predicted_ids = model.generate(input_features, forced_decoder_ids=forced_decoder_ids)
    transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)

    # Detect the language of the audio
    # detected_language = processor.detect_language(audio_array, sampling_rate=sampling_rate)

    return transcription[0]
# Example usage:
# file_path = "/home/naive123/nlp/Sumit/hackout/marathi_2_recorded_audio.flac"
# transcription = transcribe_audio(file_path)
# print(f"Transcription: {transcription}")
# print(f"Detected Language: {detected_language}")

